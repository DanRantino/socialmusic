generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  followId      String?
  postId        String?
  accounts      Account[]
  follows       Follower? @relation("User")
  Post          Post?
  sessions      Session[]
  assignedTasks Task[]    @relation("UserAssignedTasks")
  Follow        Follower? @relation(fields: [followId], references: [id])
  posts         Post[]    @relation("Likes")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String   @unique
  author    User     @relation(fields: [authorId], references: [id])
  likes     User[]   @relation("Likes")
}

model Task {
  id           String   @id @default(cuid())
  title        String
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  completed    Boolean  @default(false)
  assignedToId String
  userId       String
  assignedTo   User     @relation("UserAssignedTasks", fields: [userId], references: [id])
}

model Follower {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation("User", fields: [userId], references: [id])
  follow User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
